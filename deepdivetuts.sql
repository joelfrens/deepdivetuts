-- MySQL dump 10.16  Distrib 10.1.19-MariaDB, for osx10.11 (x86_64)
--
-- Host: deepdivetuts    Database: deepdivetuts
-- ------------------------------------------------------
-- Server version	10.1.19-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article_images`
--

DROP TABLE IF EXISTS `article_images`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_images` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `article_images_article_id_index` (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_images`
--

LOCK TABLES `article_images` WRITE;
/*!40000 ALTER TABLE `article_images` DISABLE KEYS */;
INSERT INTO `article_images` VALUES (1,1,'bbsp.jpg','2017-03-04 00:42:41','2017-03-04 00:42:41'),(2,27,'Screen Shot 2017-02-07 at 12.47.20.png','2017-03-26 21:09:50','2017-03-26 21:09:50'),(3,27,'news-1.png','2017-03-26 21:38:39','2017-03-26 21:38:39'),(4,27,'instagram-1.png','2017-03-26 21:39:02','2017-03-26 21:39:02');
/*!40000 ALTER TABLE `article_images` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_tag`
--

DROP TABLE IF EXISTS `article_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_tag` (
  `article_id` int(10) unsigned NOT NULL,
  `tag_id` int(10) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  KEY `article_tag_article_id_index` (`article_id`),
  KEY `article_tag_tag_id_index` (`tag_id`),
  CONSTRAINT `article_tag_article_id_foreign` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`) ON DELETE CASCADE,
  CONSTRAINT `article_tag_tag_id_foreign` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_tag`
--

LOCK TABLES `article_tag` WRITE;
/*!40000 ALTER TABLE `article_tag` DISABLE KEYS */;
INSERT INTO `article_tag` VALUES (2,5,NULL,NULL),(30,4,NULL,NULL),(30,10,NULL,NULL),(33,4,NULL,NULL),(33,10,NULL,NULL),(34,5,NULL,NULL),(34,10,NULL,NULL),(32,4,NULL,NULL),(32,6,NULL,NULL),(32,10,NULL,NULL),(35,4,NULL,NULL),(35,5,NULL,NULL),(35,10,NULL,NULL),(35,11,NULL,NULL),(36,4,NULL,NULL),(36,8,NULL,NULL),(36,10,NULL,NULL),(37,4,NULL,NULL),(37,8,NULL,NULL),(37,11,NULL,NULL),(38,4,NULL,NULL),(38,11,NULL,NULL),(39,4,NULL,NULL),(39,11,NULL,NULL),(41,4,NULL,NULL),(41,5,NULL,NULL),(41,6,NULL,NULL),(41,7,NULL,NULL),(41,8,NULL,NULL),(41,9,NULL,NULL),(41,10,NULL,NULL),(41,11,NULL,NULL),(40,4,NULL,NULL),(40,10,NULL,NULL),(40,11,NULL,NULL),(42,4,NULL,NULL),(43,5,NULL,NULL),(43,11,NULL,NULL),(31,5,NULL,NULL),(31,10,NULL,NULL);
/*!40000 ALTER TABLE `article_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `articles`
--

DROP TABLE IF EXISTS `articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `meta_keywords` longtext COLLATE utf8_unicode_ci NOT NULL,
  `category_id` int(11) NOT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL,
  `active` tinyint(1) NOT NULL,
  `schedule_on` datetime DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `articles_user_id_index` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles`
--

LOCK TABLES `articles` WRITE;
/*!40000 ALTER TABLE `articles` DISABLE KEYS */;
INSERT INTO `articles` VALUES (2,1,'Test 234','test-234','test',187,'','Test 45',1,NULL,'2017-03-05 21:12:05','2017-04-14 13:16:54'),(30,1,'Creating a middleware to restrict users accessing the admin section in Laravel 5.4','creating-a-middleware-to-restrict-users-accessing-the-admin-section-in-laravel-5-4','test',188,'','In this tutorial I will demonstrate how to deny access to a user to a section the admin section using Laravel 5.4 middleware. Middleware is a way of separating out functionality and to filter out your requests based on your needs. Middleware\'s makes code well structured and your filtering logic goes into separate files make your code easy to understand and read.\r\n<br />\r\nWe are going to write a middleware to check for uses status and show the user a message if the status is set to disabled and not allow the user access the admin section.\r\n<br />\r\nLet’s start by creating a simple middleware using the php artisan command:\r\n<br />\r\n<pre><code class=\"php\">\r\nPhp artisan make:middleware checkStatus\r\n</code></pre>\r\n\r\nThis command will create a file <span class=\"spl\">checkStatus.php</span> in <span class=\"spl\">app/Http/Middelware/</span> directory.\r\n\r\n<pre><code class=\"php\">\r\nnamespace App\\Http\\Middleware;\r\n\r\nuse Closure;\r\n\r\nclass CheckStatus\r\n{\r\n    /**\r\n     * Handle an incoming request.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @return mixed\r\n     */\r\n    public function handle($request, Closure $next)\r\n    {   \r\n        return $next($request);\r\n    }\r\n}\r\n</code></pre>\r\n\r\nWe need to add our code inside the handle function. Note that we have access to the $request object where we have access to all the data that is passed into the request. This can be anything - url parameter, session data etc.\r\n\r\nThe next step is to check whether the user status is set to disabled.\r\n\r\nAdd the User namespace at the top because will will be using the find ORM method on User object.\r\n\r\n<pre><code class=\"php\">\r\nuse App\\User;\r\n</code></pre>\r\n\r\nThen in the <span class=\"spl\">handle</span> method we need to check whether the logged in user status is set to disabled.\r\n\r\n<pre><code class=\"php\">\r\n...\r\n$userId = \\Auth::id();\r\n\r\n$user = User::find($userId);\r\n\r\nif ($user->status == 0) {\r\n   echo \"Sorry, Your account has been disabled.\";\r\n   exit;\r\n}\r\n...\r\n</code></pre>\r\n\r\nThe last step is to add the middleware in your routes file in <span class=\"spl\">routes/web.php</span>\r\n\r\nMy admin route looks like as follows:\r\n<pre><code class=\"php\">\r\nRoute::group([\'prefix\' =&gt; \'admin\', \'middleware\' =&gt; CheckStatus::class], function () {\r\nRoute::get(\'/pages\', \'admin\\PageController@index\');\r\nRoute::resource(\'/categories\', \'admin\\CategoryController\');\r\n\r\n//API Route\r\nRoute::get(\'/apicall/categories\', \'admin\\CategoryController@show\');\r\n});\r\n</code></pre>\r\nAlso, make sure that you add the following use statement at the start of you <span class=\"spl\">routes/web.php</span> file\r\n\r\n<pre><code class=\"php\">\r\nuse App\\Http\\Middleware\\CheckStatus;\r\n</code></pre>\r\n\r\nAlso, make sure that you have a status column in your database and use a couple of users with status enabled/disabled to check for both type of users.\r\n\r\nYou can find this code in my github repository <a href=\"http://www.github.com/joelfrens/deepdivetuts\" target=\"_blank\" rel=\"noopener noreferrer\">www.github.com/joelfrens/deepdivetuts</a>',1,NULL,'2017-04-23 11:08:43','2017-04-23 16:29:05'),(31,1,'Installing Laravel 5.4 on Windows Machine using Homestead','installing-laravel-5-4-on-windows-machine-using-homestead','test',188,'','In this tutorial I will demonstrate how to install Laravel 5.4 on a windows machine using Homestead virtual box.\r\n\r\nYou need the following before installing Homestead:\r\n<ul>\r\n 	<li><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\">VirtualBox</a></li>\r\n 	<li><a href=\"https://www.vagrantup.com/\" target=\"_blank\">Vagrant</a></li>\r\n        <li>Git Client</li>\r\n        <li>Composer</li>\r\n</ul>\r\nBefore proceeding with the installation of Homestead, you will have to set the Windows Virtualization to <strong>‘Enabled’</strong>\r\n\r\nTo do this, you will have to restart your computer and press ESC key which will take you to the BIOS setup. Some computers may use other keys to go into the BIOS setup.\r\n\r\nI am using a HP laptop and I have this setting under System Configuration. You need to set the value to <strong>‘Enabled’</strong> and save and restart your PC.\r\n\r\nSee screenshot below\r\n\r\n<img class=\"alignnone size-large wp-image-171\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/20170219_135849-1-1024x576.jpg\" alt=\"\" width=\"950\" height=\"534\" />\r\n\r\nOnce the above step has been done, we can start installing Homestead.\r\n\r\n<span class=\"hashtags\">#</span>Next step is to add the Homestead box using the following command. Open <span class=\"spl\">GIT Bash</span> in any directory and run the following command. This will add the laravel homestead box to vagrant.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nvagrant box add laravel/homestead\r\n</code>\r\n</pre>\r\n\r\n<span class=\"hashtags\">#</span>Next step is to clone the Homestead repository in a folder. You can place it in any folder that you want. It is better if you NOT place this in your <span class=\"spl\">C:\\</span>\r\n\r\nRun the following command to clone the repository.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\ngit clone https://github.com/laravel/homestead.git Homestead\r\n</code>\r\n</pre>\r\n\r\nNow, go inside the Homestead directory and run the <span class=\"spl\">init.bat</span> script <span class=\"spl\">(Double Click in Windows)</span>\r\n\r\nThis will create the <span class=\"spl\">Homestead.yaml</span> file in your <span class=\"spl\">C:\\Users\\YOUR_USERNAME\\.homestead folder</span>.\r\n\r\nOpen the <span class=\"spl\">Homestead.yaml</span> file and set the provider to <span class=\"spl\">virtualbox</span> like shown below:\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n...\r\nprovider: virtualbox\r\n...\r\n</code>\r\n</pre>\r\n<span class=\"hashtags\">#</span>Next step is to make sure that you have your <span class=\"spl\">ssh keys</span> on your computer\r\n\r\nGo to <span class=\"spl\">C:\\Users\\YOUR_USERNAME\\.ssh</span> folder and check if you have the following files\r\n<ul>\r\n 	<li>Id_rsa</li>\r\n 	<li>Id_rsa.pub</li>\r\n</ul>\r\n\r\nThese two files are reference in your <span class=\"spl\">Homestead.yaml</span> file\r\n\r\nIf these files are NOT present then you should generate your ssh keys by using the following command:\r\n\r\nOpen <span class=\"spl\">Git Bash</span> and type the following command:\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\r\n</code>\r\n</pre>\r\n\r\nThe above command will ask you to specify a location to store your keys. Simply Press Enter.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\r\n[/php]\r\n\r\nThen it will ask you to type in a passphrase\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nEnter passphrase (empty for no passphrase): [Type a passphrase]\r\nEnter same passphrase again: [Type passphrase again]\r\n</code>\r\n</pre>\r\n\r\nYou can enter any passphrase here.\r\n\r\nLet\'s go through some more settings in your Homestead.yaml file.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n...\r\nauthorize: ~/.ssh/id_rsa.pub\r\n\r\nkeys:\r\n    - ~/.ssh/id_rsa\r\n\r\n</code>\r\n</pre>\r\n\r\n<span class=\"hashtags\">#</span>Next step is to create folders and sync them across the virtual machine.\r\n\r\n[php]\r\nfolders:\r\n    - map: C:\\laravel-projects\r\n      to: /home/vagrant/Code\r\n\r\nsites:\r\n    - map: deepdivecms.app\r\n      to: /home/vagrant/Code/deepdivecms/public\r\n\r\ndatabases:\r\n    - homestead\r\n...\r\n</code>\r\n</pre>\r\n\r\nIn the above code we are syncing windows folder <span class=\"spl\">C:\\laravel-projects</span> to <span class=\"spl\">/home/vagrant/Code</span> folder on virtual machine. What this will do is, it will create a duplicate directory automatically into your Homestead box when you create them on Windows machine.\r\n\r\nNow, all my laravel project go inside <span class=\"spl\">C:\\laravel-projects</span>.\r\n\r\n<span class=\"hashtags\">#</span>Next, we need to create our sites and map them to a folder. So, in the above code I am mapping <span class=\"spl\">deepdivecms.app</span> to <span class=\"spl\">/home/vagrant/Code/deepdivecms/public</span> folder.\r\n\r\nHere’s a complete <span class=\"spl\">Homestead.yaml</span> file\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n---\r\nip: \"192.168.10.10\"\r\nmemory: 2048\r\ncpus: 1\r\nprovider: virtualbox\r\n\r\nauthorize: ~/.ssh/id_rsa.pub\r\n\r\nkeys:\r\n    - ~/.ssh/id_rsa\r\n\r\nfolders:\r\n    - map: C:\\laravel-projects\r\n      to: /home/vagrant/Code\r\n\r\nsites:\r\n    - map: deepdivecms.app\r\n      to: /home/vagrant/Code/deepdivecms/public\r\n\r\ndatabases:\r\n    - homestead\r\n\r\n</code>\r\n</pre>\r\n\r\nWe are almost done…\r\n\r\nWe now have to create a hosts entry in our host file.\r\n\r\nCopy the <span class=\"spl\">hosts</span> file from this directory <span class=\"spl\">C:\\Windows\\System32\\drivers\\etc</span> to Desktop. We are copying this because it system won’t allow us to modify this file while in this directory.\r\n\r\nAt the end of the file, add the following line\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n192.168.10.10  deepdivecms.app\r\n</code>\r\n</pre>\r\n\r\nSo basically we are mapping <span class=\"spl\">192.168.10.10</span> to <span class=\"spl\">deepdivecms.app</span> and <span class=\"spl\">192.168.10.10</span> is set in our <span class=\"spl\">Homestead.yaml</span> file.\r\n\r\nNow, its time to start our box. Go to your Homestead folder and type <span class=\"spl\">vagrant up</span>. This should launch your box if you have installed it without errors.\r\n\r\nOpen your browser and type <span class=\"spl\">http://deepdivecms.app</span>. If you see the default Laravel page then you have installed it correctly.\r\n\r\nIf you want to ssh into your Homestead box then go inside your Homestead folder and type\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nVagrant ssh\r\n</code>\r\n</pre>\r\n\r\nNavigate to <span class=\"spl\">cd /Home/vagrant/Code/deepdivecms/</span> and you should see all your files there.\r\n\r\nHappy Installing :)\r\n\r\nVideo tutorial\r\n\r\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/r5cytqxsZf8\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\n<h1 class=\"entry-title\">Issues and Fixes</h1>\r\n\r\n<strong>1. Vagrant ssh throws up the following error</strong>\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nC:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-1.9.3/lib/vagrant/util/is_port_open.rb:21:in `initialize\': The requested address is not valid in its context. - connect(2) for \"0.0.0.0\" port 8000 (Errno::EADDRNOTAVAIL)\r\n</code>\r\n</pre>\r\n\r\n<strong>Fix</strong>\r\n\r\nIn your Homestead/scripts/homestead.rb file replace the following lines of code\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n# Use Default Port Forwarding Unless Overridden\r\nunless settings.has_key?(\"default_ports\") && settings[\"default_ports\"] == false\r\n    default_ports.each do |guest, host|\r\n        unless settings[\"ports\"].any? { |mapping| mapping[\"guest\"] == guest }\r\n            config.vm.network \"forwarded_port\", guest: guest, host: host, auto_correct: true\r\n        end\r\n    end\r\nend\r\n\r\n# Add Custom Ports From Configuration\r\nif settings.has_key?(\"ports\")\r\n    settings[\"ports\"].each do |port|\r\n        config.vm.network \"forwarded_port\", guest: port[\"guest\"], host: port[\"host\"], protocol: port[\"protocol\"], auto_correct: true\r\n    end\r\nend\r\n\r\n</code>\r\n</pre>\r\n\r\nWith\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nunless settings.has_key?(\"default_ports\") && settings[\"default_ports\"] == false\r\n    default_ports.each do |guest, host|\r\n        unless settings[\"ports\"].any? { |mapping| mapping[\"guest\"] == guest }\r\n            config.vm.network \"forwarded_port\", guest: guest, host: host, host_ip: \"127.0.0.1\", auto_correct: true\r\n        end\r\n    end\r\nend\r\n\r\n# Add Custom Ports From Configuration\r\nif settings.has_key?(\"ports\")\r\n    settings[\"ports\"].each do |port|\r\n        config.vm.network \"forwarded_port\", guest: port[\"guest\"], host: port[\"host\"], protocol: port[\"protocol\"], host_ip: \"127.0.0.1\", auto_correct: true\r\n    end\r\nend\r\n</code>\r\n</pre>\r\n\r\n<hr />\r\n\r\n<strong>2. Code folder cannot be seen</strong>\r\n\r\nI was able to replicate this issue when I didn\'t run vagrant ssh from my console.\r\n\r\nPossible Fix - Run vagrant ssh after running vagrant up\r\n\r\n<img src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/skitch.png\" alt=\"\" width=\"585\" height=\"342\" class=\"alignnone size-full wp-image-241\" />\r\n\r\n<hr />\r\n\r\n<strong>Stuck at the  homestead-7: SSH username: vagrant homestead-7: SSH auth method: private key</strong>\r\n\r\nPossible Fix - I got this issue a few times and this issue was mainly because my firewall, Bytefence, Windows defender tools not allowing to login into the system. Make sure you have the following tools disabled:\r\n\r\n<ul>\r\n<li>Anti-virus software</li>\r\n<li>Anti-malware software</li>\r\n<li>Skype - I am not sure if this an issue</li>\r\n</ul>\r\n\r\nTry to disable these tools at startup.\r\n\r\n<img src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/skitch1.png\" alt=\"\" width=\"665\" height=\"591\" class=\"alignnone size-full wp-image-243\" />',1,NULL,'2017-04-23 11:09:24','2017-04-23 20:08:27'),(32,1,'Laravel Configuration','laravel-configuration','test',188,'','After installing Laravel we need to set permission to <strong>Storage</strong> directory and <strong>Bootstrap/cache</strong> directory.\r\n\r\n<strong>Environmental configuration</strong>\r\n\r\nLaravel provides facility to run your application in different environment like testing, production etc. You can configure the environment of your application in the .env file of the root directory of your application. If the root directory doesn’t contain the .env file then rename the .env.example to .env file.\r\n\r\nThe <strong>.env</strong> file looks like following.\r\n\r\n<img class=\"alignnone size-full wp-image-151\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/config_screen2.png\" alt=\"\" width=\"644\" height=\"616\" />\r\n\r\nNote <strong>Local</strong> environment variable has been set. It can further be changed to <strong>production</strong> or <strong>testing</strong> as per your requirement.\r\n\r\nYou can generate Application key to secure session and other encrypted data. To generate Application key execute the following command where you have installed Laravel. The newly generated key can be seen in the .env file.\r\n\r\n[php]\r\n\r\nphp artisan key:generate\r\n\r\n[/php]\r\n\r\nAfter executing above command, output should look like following.\r\n\r\n<img class=\"alignnone size-full wp-image-152\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/config_keygen.png\" alt=\"\" width=\"636\" height=\"164\" />\r\n\r\n<strong>Database Configuration</strong>\r\n\r\nYour application’s database can be configured from config/database.php file. You can set the parameters used by different databases and you can also set the default one.\r\n\r\nDatabase.php file looks like following.\r\n\r\n<img class=\"alignnone size-full wp-image-153\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/config_screen3.png\" alt=\"\" width=\"644\" height=\"822\" />\r\n\r\n<strong>Naming the Application</strong>\r\n\r\nTo change the namespace of an app use following command\r\n\r\n[php]\r\n\r\nPhp artisan app:name <your-name-for-application>\r\n\r\n[/php]\r\n\r\nMaintenance Mode\r\n\r\nIf you need to modify your website on regular bases, you can put your website in maintenance mode. There are two artisan commands which are used to start and stop the maintenance mode which are described below.\r\n\r\nTo start the maintenance mode, simply execute the following command.\r\n\r\n[php]\r\n\r\nPhp artisan down\r\n\r\n[/php]\r\n\r\nAfter executing about command you will see following output.\r\n\r\n<img class=\"alignnone size-full wp-image-154\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/php_artisan_down.png\" alt=\"\" width=\"702\" height=\"169\" />\r\n\r\nIt will activate the Maintenance mode and all the request to server will be redirected to a single maintenance page as shown in the following page.\r\n\r\n<img class=\"alignnone size-full wp-image-155\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/php_artisan_down_output.png\" alt=\"\" width=\"700\" height=\"490\" />',1,NULL,'2017-04-23 11:09:44','2017-04-23 16:30:59'),(33,1,'Create a simple admin section using Laravel 5.3 and Blade templates','create-a-simple-admin-section-using-laravel-5-3-and-blade-templates','test',188,'','In this tutorial I am going to demonstrate how to create a simple admin section in Laravel 5.3. I will be using blade templating for the views.\r\n\r\nThe steps are as follows:\r\n\r\n1. The first step is to create a controller. To create a controller you need to open your terminal or windows console if you are on the Windows PC, navigate to your project and execute the following command:\r\n\r\n[php]\r\nPhp artisan make:controller PageController - -resource\r\n[/php]\r\n\r\n2. If you want to create resource controllers then you need to add <span class=\"spl\">--resource</span> to the above command. This will create all the methods like the index, store, edit, update, show and destroy.\r\n\r\nIf you want a empty controller then don’t add the <span class=\"spl\">--resource</span>\r\n\r\nOnce we have created the controller, we need to set the route. \r\n	\r\nIf you have created a resource controller then you will have to add just one route and Laravel will handle the rest of the routing for you.\r\n\r\nIn <span class=\"spl\">resources/routes/web.php</span> add the following code at the end of the file.\r\n\r\n[php]\r\nRoute::group([\'prefix\' => \'admin\'], function () {\r\n    Route::get(\'/pages\', \'admin\\PageController@index\');\r\n});\r\n[/php]\r\n	\r\nNote that we have added an admin prefix. This will give us an unique url for our admin section. \r\n\r\nAll our admin Controllers will go inside this route group.\r\n\r\nAlso, note that our controller has been created under the directory <span class=\"spl\">app/Http/Controllers</span>. We need to tweak this a little bit.\r\n\r\nCreate a new directory inside <span class=\"spl\">app/Http/Controllers</span> called <span class=\"spl\">admin</span>. Move the PageController.php file inside the <span class=\"spl\">admin</span> directory. This folder will contain all our admin controllers.\r\nThe next step is to change the <span class=\"spl\">namespace</span> in the <span class=\"spl\">PageController.php</span> file.\r\n	\r\nChange the namespace from:\r\n\r\n[php]\r\nnamespace App\\Http\\Controllers;\r\n[/php]\r\n\r\nTo:\r\n\r\n[php]\r\nnamespace App\\Http\\Controllers\\admin;\r\n[/php]\r\n\r\nThe next step is to create the view files.\r\n\r\nSince this is an admin section, we want all our admin views inside one directory. Create a new folder in <span class=\"spl\">resources/views</span> called <span class=\"spl\">admin</span>, then create another folder inside admin called <span class=\"spl\">page</span> and inside the page folder create your blade view files in there.\r\n\r\nOnce you have created your view files, to reference the view files from the admin PageController use the following code in your controller methods.\r\n\r\n[php]\r\n\r\npublic function index()\r\n{\r\n   ...\r\n        \r\n   // load the view and pass the categories\r\n   return view(\'admin.page.index\', [pages => $pages]);\r\n\r\n   ...\r\n}\r\n\r\n[/php]\r\n\r\nSince this is an admin section, we will have to check if the user is an authenticated user. We can do this in the PageController’s constructor by adding a auth middleware like so:\r\n\r\n[php]\r\npublic function __construct()\r\n{\r\n    $this->middleware(\'auth\');\r\n}\r\n[/php]\r\n\r\nOpen a browser and type in your domain name followed by <span class=\"spl\">/admin/pages</span>. You should be able to see the admin page if you are logged in or view the page if you have done it correctly.\r\n',1,NULL,'2017-04-23 11:10:12','2017-04-23 16:30:12'),(34,1,'Laravel installation on windows platform','laravel-installation-on-windows-platform','test',188,'','For managing dependencies Laravel uses <strong>Composer</strong>, you need to have composer installed in your system.\r\n<strong>Step 1.</strong> First step for setting up Laravel is to install composer, download the composer exe from following link and execute the exe file.\r\n\r\n<a href=\"https://getcomposer.org/download/\">https://getcomposer.org/download/</a>\r\n\r\nNote:<em> composer can be installed with downloaded <strong>Exe</strong> or can be installed from command line, please check our topic <strong>Composer Installation</strong> for details about installing composer</em>.\r\n\r\n<strong>Step 2.</strong> To know if composer installation was successful, simply type “<strong>composer</strong>” command at your command prompt as shown in following screen shot. It should show you following output.\r\n\r\n<img class=\"alignnone size-full wp-image-130\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/image00.png\" alt=\"\" width=\"573\" height=\"429\" />\r\n\r\n<strong>Step 3.</strong> Create new directory on your system where you want to have your Laravel project, now from command prompt move to the Laravel project directory you have created. Type following command to start installing Laravel in your project directory. This command will install all required packages for your project.\r\n\r\n[php]\r\n\r\ncomposer create-project laravel/laravel –-prefer-dist\r\n\r\n[/php]\r\n\r\n<strong>Step 4.</strong> To start Laravel service type following command\r\n\r\n[php]\r\n\r\nphp artisan serve\r\n\r\n[/php]\r\n\r\nAfter executing the above command, you will see screen shown below.\r\n\r\n<strong>Note:</strong> <em>Note that you need be inside the directory where Laravel is installed.</em>\r\n\r\n<img class=\"alignnone size-full wp-image-136\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/screen1.png\" alt=\"\" width=\"573\" height=\"194\" />\r\n\r\n<strong>Step 5.</strong> To see output, type following URL in your browser\r\n\r\nhttp://localhost:8000/\r\n\r\nAfter typing above URL in browser, you should see following screen.\r\n\r\n<img class=\"alignnone size-full wp-image-140\" src=\"http://deepdivetuts.com/wp-content/uploads/2017/02/screen2.png\" alt=\"\" width=\"573\" height=\"446\" />\r\n\r\nWith this we complete the installation of Laravel on windows platform.',1,NULL,'2017-04-23 11:10:37','2017-04-23 16:30:27'),(35,1,'Free Laravel 5.3 Video Tutorials','free-laravel-5-3-video-tutorials','test',186,'','In this tutorial we will implement the following functionality using Laravel 5.3:\r\n\r\n<ul>\r\n	<li><a href=\"http://deepdivetuts.com/installing-larave-5-3-on-a-mac-pc\">Setting Up Laravel 5.3 on a Mac PC</a></li>\r\n	<li><a href=\"http://deepdivetuts.com/create-a-simple-admin-section-using-laravel-5-3-and-blade-templates\">Setting Up a simple admin sections using routes and namespaces</a></li>\r\n	<li><a href=\"http://deepdivetuts.com/adding-a-radio-button-in-laravel-5-3-blade-template\">Adding a radio button in Laravel 5.3 blade template</a></li>\r\n	<li><a href=\"http://deepdivetuts.com/basic-create-edit-update-delete-functionality-laravel-5-3\">Basic CRUD (Create, Read, Update, Delete) functionality</a></li>\r\n        <li><a href=\"http://deepdivetuts.com/adding-a-radio-button-in-laravel-5-3-blade-template\">Adding a radio button in Laravel 5.3 blade template</a></li>\r\n</ul>\r\n\r\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube-nocookie.com/embed/videoseries?list=PLe-L0qrpNHcTvyj8shQUebyVTNJhSioMe\" frameborder=\"0\" allowfullscreen></iframe>',1,NULL,'2017-04-23 16:33:51','2017-04-23 16:33:51'),(36,1,'Add an image to blade form in Laravel-5-3','add-an-image-to-blade-form-in-laravel-5-3','test',188,'','In this tutorial we are going to add an image to our category entity. We are going to use the Form class of laravel collective package. Check this tutorial to see how to add the laravel collective package.\r\n\r\nIn your admin/categories/create.blade.php form file, add the following code:\r\n\r\nThe insert functionality\r\n\r\n[php]\r\n{{Form::label(\'Category Image\')}}\r\n{{Form::file(\'categoryimage\')}}\r\n[/php]\r\n\r\nSince our form will accept files we need to amend the Form tag as below:\r\n\r\n[php]\r\n{{ Form::open(array(\'url\' => \'admin/categories\', \'files\' => true)) }}\r\n[/php]\r\n\r\nNote that we are adding …’files’ => true to the array. \r\n\r\nNext, we need to accept the file in the store() method. \r\n\r\n[php]\r\n//get image\r\n$destinationPath = \'uploads\';\r\n$filename = \'\';\r\n\r\n$file = Input::file(\'categoryimage\');\r\n            \r\n$rules = array(\'file\' => \'required\');\r\n$validator = Validator::make(array(\'file\' => $file), $rules);\r\n\r\nif ($validator->passes()){\r\n\r\n      $filename = $file->getClientOriginalName();\r\n\r\n      $file->move($destinationPath, $filename);\r\n\r\n}\r\n\r\nif($filename != \'\')\r\n        $category->category_image = $filename;\r\nelse\r\n        $category->category_image = \'\';\r\n[/php]\r\n\r\nWe are using a few functions that are provided to us by Laravel. We will use getClientOriginalName to get the original uploaded name of the file.\r\n\r\nNext we are using the move() function to move the file from the source to the destination path. In our case the destination path is set to uploads/ directory.\r\n\r\nMake sure that you have this directory created in your public/ directory and that the permissions are set so that you can uploads files to it.\r\n\r\nThe update functionality\r\n\r\nIn your admin/categories/edit.blade.php,\r\n\r\n[php]\r\n{{Form::label(\'Category Image\')}}\r\n{{Form::file(\'categoryimage\')}}\r\n\r\n@if ($category->category_image != \"\")\r\n       <img src=\"/uploads/{{$category->category_image}}\" width=\"100px\">\r\n@endif\r\n[/php]\r\n\r\nIn the update method of categoryController.php, the code will be the same as the store() method.\r\n\r\nYou can get this code on my Github account.\r\n\r\nYou can also view my Youtube channel.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',0,NULL,'2017-04-23 16:34:33','2017-04-23 16:34:33'),(37,1,'Adding a radio button in Laravel 5.3 blade template','adding-a-radio-button-in-laravel-5-3-blade-template','test',188,'','In this tutorial we will be adding a radio option to our category model.\r\n\r\nBefore starting this tutorial you will need to know the packages that I have used to render a Form in the blade template. You should read my <a href=\"http://deepdivetuts.com/basic-create-edit-update-delete-functionality-laravel-5-3\">Laravel 5.3 CRUD tutorial</a> if you want to know the packages I have installed.\r\n\r\nTo add a radio button, lets add the Form code in our blade template at views/admin/category/create.blade.php\r\n<h2>Insert Interface for radio button</h2>\r\nIn the category form add the following code in the middle-\r\n\r\n[php]\r\n…\r\n{{ Form::label(\'visible\', \'Visibility\') }}\r\n{{ Form::radio(\'visible\', \'1\') }} Yes\r\n{{ Form::radio(\'visible\', \'0\') }} No\r\n....\r\n[/php]\r\n\r\nThe Form::radio function takes in two parameter:\r\nName of the attribute\r\nValue of the attribute\r\n\r\nNext, when the form is submitted, we will have to get this value using the Input library. The code in the store method would look as below:\r\n\r\n[php]\r\npublic function store(Request $request)\r\n{\r\n…\r\n$category->name       = Input::get(\'name\');\r\n$category->visible       = Input::get(\'visible\');\r\n$category->desc       = Input::get(\'desc\');\r\n$category->save();\r\n…\r\n}\r\n[/php]\r\n\r\nMake sure that you have include the following statement at the top of your file before starting the class statement.\r\n\r\n[php]\r\nuse Illuminate\\Support\\Facades\\Input;\r\n[/php]\r\n\r\n<h2>Update Interface for Radio button</h2>\r\nIn the views/admin/category/edit.blade.php add the following lines in between the edit form.\r\n\r\n[php]\r\n{{ Form::label(\'visible\', \'Visibility\') }}\r\n\r\n@if ($category->visible == \'1\')\r\n    {{ Form::radio(\'visible\', \'1\', true, [\'checked\' => \'checked\']) }} Yes\r\n    \r\n    {{ Form::radio(\'visible\', \'0\', false, []) }} No\r\n@else\r\n    {{ Form::radio(\'visible\', \'1\', false, []) }} Yes\r\n    \r\n    {{ Form::radio(\'visible\', \'0\', true, [\'checked\' => \'checked\']) }} No\r\n@endif\r\n[/php]\r\n\r\nForm::radio takes in a third argument as true/false to check/uncheck the radio buttons.\r\n\r\nImportant note: The radio button had some issue to remain selected and I had to do a work-around by using [\'checked\' => \'checked\'] array attributes.\r\n\r\nThe update function code will be the same as the store function code.\r\n\r\nThis code is available on my <a href=\"http://www.github.com/joelfrens/deepdivetuts\">Github repository</a>\r\n\r\nYou can also visit my Youtube channel if you prefer video tutorials.',1,NULL,'2017-04-23 16:35:09','2017-04-23 16:35:09'),(38,1,'Laravel Eloquent ORM Basics','laravel-eloquent-orm-basics','test',188,'','ORM stands for Object-relational mapping and its a simple ActiveRecord implementation for working with your databases.\r\n\r\nIt really simplifies a lot of functionality that would be difficult if you go the traditional way of accessing the database. In this tutorial we will take a look how to access the database tables using ORM functions.\r\n\r\nTo demonstrate the in-built functions we are going to work with the categories model.\r\n\r\nIf you have not yet created a categories model then create one now using the following php artisan command:\r\n\r\n[php]\r\nPhp artisan make:model Category\r\n[/php]\r\n\r\nThis will generate a simple model file with not much functionality.\r\n\r\nNext we are going to write some code in the app/Http/Controller/CategoryController.php file\r\n<h2>Retrieving All Models</h2>\r\nLets say that we want to get all the categories from the category table. If you are a PHP developer then you would do something like this:\r\n\r\n[php]\r\nSELECT * FROM categories;\r\n[/php]\r\n\r\nBut ORM does this for you and all you have to do is remember a few ORM functions that are built in into the package.\r\n\r\nTo write the above query using ORM, we would simply write the following code.\r\n\r\n[php]\r\n$categories = Category:all();\r\n[/php]\r\n\r\nThere are two advantages of writing this type of code:\r\nThe code is much more cleaner\r\nIf you are working in a team then everybody writes and understands the same code.\r\n\r\nNote that the above statement will return an object and you can use a FOR loop to get all the details. Something like this:\r\n\r\n[php]\r\nforeach($categories as $category) \r\n{\r\n	echo $category->name;\r\n}\r\n[/php]\r\n\r\nNext, say suppose you want to get all categories that are visible and order them in descending order by Id:\r\n\r\nYour typical mysql query would look like this:-\r\n\r\n[php]\r\nSELECT * FROM categories WHERE visible = 1 ORDER BY id DESC;\r\n[/php]\r\n\r\nThe equivalent query in Eloquent ORM will look like this:\r\n\r\n[php]\r\n$categories = Category::where(‘visible’, 1)->orderBy(‘id’, ‘desc’)\r\n[/php]\r\n\r\n<h2>Retrieving single Model</h2>\r\nIf you want to retrieve a single model by using their primary key the the ORM query will be as follows:\r\n\r\n[php]\r\n$category = Category::find(1);\r\n[/php]\r\n\r\nEquivalent mysql query:\r\n\r\n[php]\r\nSELECT * FROM category WHERE id=1;\r\n[/php]\r\n\r\nRemember that a record with ID=1 will be searched in the categories table.\r\n\r\nSuppose if you are not sure that the ID=1 exists in the database then you can use findORfail to check if the category exists or not.\r\n\r\n[php]\r\n$category = Category::findOrFail(1);\r\n[/php]\r\n\r\nRemember that the findOrFail function is case sensitive and should be in a camel case format as shown above.\r\n<h2>Retrieving aggregates</h2>\r\nThere may be a situation where you will want to get the count of categories or get the maximum Id of the categories. Laravel ORM provides these built in functions as well.\r\n\r\nYou can get the count of categories as follows:\r\n\r\n[php]\r\n$categories = Category::where(‘visible’, 1)->count();\r\n[/php]\r\n\r\nEquivalent Mysql query\r\n\r\n[php]\r\nSELECT count(*) FROM categories WHERE visible = 1;\r\n[/php]\r\n\r\nYou can aslo get the Max Id of the Categories by doing the following:\r\n\r\n[php]\r\n$categories = Category::where(‘visible’, 1)->max(‘id’);\r\n[/php]\r\n\r\n<h2>Inserting a Model into database</h2>\r\nTo insert a new model into database, in your controller, create a new instance of the model and set the properties of the model. For the categories model, inserting a new category would look something like this.\r\n\r\n[php]\r\n$category = new Category;\r\n$category->name = $request->name;\r\n$category->visible = $request->visible;\r\n$category->save();\r\n[/php]\r\n\r\nAlways remember that the $request variable is available to you in your controller functions.\r\n<h2>Updating a Model</h2>\r\nTo update a specific category model, we will have to fetch the category and then set the attributes of the category. The code would look something like this:\r\n\r\n[php]\r\n$id = 1;\r\n$category = Category::find($id);\r\n$category->name = $request->name;\r\n$category->visible = $request->visible;\r\n$category->save();\r\n[/php]\r\n\r\nThis will update the name and visible column of category Id 1.\r\n<h2>Deleting a Model</h2>\r\nTo delete a cateogory model, we will have to first fetch the category using the find method and then use the delete() method to delete the fetched category. The code would look something like this.\r\n\r\n[php]\r\n$category = Category::find($id);\r\n$category-&gt;delete();\r\n[/php]\r\n\r\nThere is a method of deleting the model without fetching the model data. It uses a destroy function and the code would look as below:\r\n\r\n[php]\r\nCategory::destroy(1);\r\n[/php]\r\n\r\nYou can also pass an array to destroy function to delete multiple rows.\r\n\r\n[php]\r\nCategory::destroy([1,5,6]);\r\n[/php]\r\n\r\nI am going to do an advanced level tutorial of ORM where we will look at some advanced capabilities of Eloquent ORM.\r\n\r\nYou can get this code on my GIT repository or you can also subscribe to my Youtube Channel.',1,NULL,'2017-04-23 16:35:44','2017-04-23 16:35:44'),(39,1,'Seeding two tables using Laravel 5.3','seeding-two-tables-using-laravel-5-3','test',188,'','In this tutorial we are going to write a script to seed two tables using Laravel 5.3 seeding classes and Model factory.\r\n\r\nIn order to demonstrate this functionality I have two tables:\r\n<ol>\r\n 	<li>Categories table</li>\r\n 	<li>Videos table</li>\r\n</ol>\r\nI am assuming that you know how to do migrations and also having a basic understanding of the Artisan command.\r\n\r\nYou need to also know about the Faker library of PHP. This will be used to generate dummy content.\r\n\r\nMigrations for these two tables.\r\n[php]\r\n<?php\r\n\r\nuse Illuminate\\Support\\Facades\\Schema;\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass CreateVideosTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create(\'videos\', function (Blueprint $table) {\r\n            $table->increments(\'id\');\r\n            $table->string(\'title\');\r\n            $table->text(\'description\');\r\n            $table->integer(\'category_id\');\r\n            $table->boolean(\'status\');\r\n            $table->softdeletes();\r\n            $table->timestamps();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists(\'videos\');\r\n    }\r\n}\r\n[/php]\r\n\r\n&nbsp;\r\n[php]<?php\r\n\r\nuse Illuminate\\Support\\Facades\\Schema;\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass CreateCategoriesTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create(\'categories\', function (Blueprint $table){\r\n            $table->increments(\'id\');\r\n            $table->string(\'name\');\r\n            $table->string(\'slug\');\r\n            $table->boolean(\'visible\');\r\n            $table->timestamps();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        //Drop the table\r\n        Schema::drop(\'categories\');\r\n    }\r\n}\r\n[/php]\r\n&nbsp;\r\n\r\nMy tables are not complex. The relationship is set so that each video belongs to one category and each category has many videos.\r\n\r\nIn Category.php model lets have the following function\r\n\r\n[php]\r\n...\r\npublic function videos()\r\n{\r\n    return $this->hasMany(\'App\\Video\');\r\n}\r\n...\r\n[/php]\r\n\r\nThis basically reads to Category hasMany Videos\r\n<span class=\"lang:default decode:true crayon-inline \">Note that I am using videos (plural) since it is a hasMany relationship.</span>\r\n\r\nIn Video.php Model Lets have the following function:\r\n\r\n[php]\r\n...\r\npublic function Category()\r\n{\r\n    return $this->belongsTo(\'App\\Category\');\r\n}\r\n...\r\n[/php]\r\n\r\nThis statement reads to Video belongs to a Category.\r\n\r\n<span class=\"lang:default decode:true crayon-inline \">Note that I am using Category (singular) since it is a one-to-one relationship.</span>\r\n\r\nOnce my relationships are set, I can start writing code in my seeder class.\r\n\r\nLets use database/factories/ModelFactory.php file to define our factories. Lets create two factories since we have to models.\r\n\r\n[php]\r\n...\r\n$factory->define(App\\Category::class, function (Faker\\Generator $faker) {\r\n    $name = $faker->name;\r\n    return [\r\n        \'name\' => $name,\r\n        \'visible\' => 1\r\n    ];\r\n});\r\n\r\n$factory->define(App\\Video::class, function (Faker\\Generator $faker) {\r\n   return [\r\n        \'title\' => $faker->name,\r\n        \'description\' => \'\',\r\n        \'status\' => 1\r\n    ];\r\n});\r\n...\r\n[/php]\r\n\r\nLet’s fill in just few info in the Video class. Note that I am not adding the category_id fields and I want to populate this field automatically using the seeder class.\r\n\r\nNext, we need to create a seeder class. To create a seeder class let\'s use the php artisan command\r\n\r\n[php]\r\nphp artisan db:seed --class=CategoriesTableSeeder\r\n[/php]\r\nWhen this seeder is created, it will have a run method where we need to place our code.\r\n\r\n[php]\r\n<?php\r\n\r\nuse Illuminate\\Database\\Seeder;\r\n\r\nclass CategoriesTableSeeder extends Seeder\r\n{\r\n    /**\r\n     * Run the database seeds.\r\n     *\r\n     * @return void\r\n     */\r\n    public function run()\r\n    {\r\n        $categories = factory(App\\Category::class, 20)->create()->each(function ($u) {\r\n        		for ($i=0; $i<5; $i++)\r\n        		{\r\n		        	$u->videos()->save(factory(App\\Video::class)->make());\r\n		    	}\r\n		    });\r\n    }\r\n}\r\n[/php]\r\n\r\nIn the code above we are creating 20 categories and for each category we are passing the object $u to create associated videos. This means that the category_id will be filled in automatically by the seeder as we have the relationships set between the two models.\r\n\r\nIf you want to fix a value for a specific column then you can pass an array to the make() function. For ex. you can pass [\'title\' => \'Test Video\'] and all the videos will have the same title. This is basically over riding the definition from the ModelFactory.php file.\r\n\r\nThe last step is to run the seeder class using the following php artisan command\r\n\r\n[php]\r\nphp artisan db:seed --class=CategoriesTableSeeder\r\n[/php]\r\n\r\nIf we don\'t pass the --class parameter then all the seeders will be run.\r\n\r\nYou can find this raw code on my <strong><span style=\"color: #339966;\"><a style=\"color: #339966;\" href=\"https://github.com/joelfrens/deepdivetuts\">git repository</a></span></strong>',1,NULL,'2017-04-23 16:37:18','2017-04-23 16:37:18'),(40,1,'Basic Create, Edit, Update, Destroy functionality using Laravel 5.3','basic-create-edit-update-destroy-functionality-using-laravel-5-3','test',188,'','In this tutorial we will create basic CRUD functionality (Create, Edit, Update and Delete) using Laravel 5.3. There are a few changes done in the latest version of Laravel 5.3 that I found that broke my earlier code. Many tutorials that are available online are not up to date and were not much helpful so I decided to write a tutorial.\r\n\r\n<span class=\"hashtags\">#</span>First of all we will have to create a resource route in your <span class=\"spl\">routes/web.php</span>. This is one of the change in Laravel 5.3: In earlier versions there was just one routes.php file but in Laravel 5.3 the routes have been split into three files.\r\n\r\nNote that I am adding this route to resource controller for an <a href=\"http://deepdivetuts.com/create-a-simple-admin-section-using-laravel-5-3-and-blade-templates\" target=\"_blank\">admin section</a>. \r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n<script type=\"prism-html-markup\">\r\nRoute::group([\'prefix\' => \'admin\'], function () {\r\n  ...\r\n  Route::resource(\'/categories\', \'admin\\CategoryController\');\r\n  ...\r\n});\r\n</script>\r\n</code>\r\n</pre>\r\n\r\n<span class=\"hashtags\">#</span>Next, we have to install a package using composer to make HTML and FORM functionality work. Laravel 5.3 does not come with HTML and FORM package installed.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n<script type=\"prism-html-markup\">\r\ncomposer require \"laravelcollective/html\":\"^5.2.0\"\r\n</script>\r\n</code>\r\n</pre>\r\n\r\n<span class=\"hashtags\">#</span>Next in the <span class=\"spl\">config/app.php</span> we have to add the following providers and aliases at the end of each arrays like shown below:\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n\'providers\' => [\r\n…\r\nCollective\\Html\\HtmlServiceProvider::class,\r\n…\r\n],\r\n\'aliases\' => [\r\n...\r\n\'Form\' => Collective\\Html\\FormFacade::class,\r\n\'Html\' => Collective\\Html\\HtmlFacade::class,\r\n\'Input\' => Illuminate\\Support\\Facades\\Input::class,\r\n…\r\n],\r\n</code>\r\n</pre>\r\n\r\n<span class=\"hashtags\">#</span>Next, We will have to create a controller using the following PHP artisan command in the command line editor. Make sure you are creating this inside your project directory.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nphp artisan make:controller CategoryController --resource\r\n</code>\r\n</pre>\r\n\r\nThis command will create a Category resource controller with a few empty functions/methods such as index, create, edit, update, show and destroy. Note that these are REST functions.\r\n\r\nThe file will be created in <span class=\"spl\">Http/Controllers/CategoryController.php</span> but we need this in the <a href=\"http://deepdivetuts.com/create-a-simple-admin-section-using-laravel-5-3-and-blade-templates\" target=\"_blank\">admin section</a> so we will have to create a simple <span class=\"spl\">admin</span> folder inside Controllers directory and move the <span class=\"spl\">CategoryController.php</span> inside the <span class=\"spl\">admin/</span> folder.\r\n\r\nIn doing this we have changed its location so now we have to change the namespace as well. The namespace now changes from:\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nnamespace App\\Http\\Controllers;\r\n</code>\r\n</pre>\r\n\r\nTo\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nnamespace App\\Http\\Controllers\\admin;\r\n</code>\r\n</pre>\r\n\r\nRemember also to add the following entities and classes at the top of the file\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n\r\n...\r\n\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\nuse App\\Category;\r\nuse Validator;\r\nuse DB, Session, Crypt, Hash;\r\nuse Illuminate\\Support\\Facades\\Input;\r\n\r\n...\r\n\r\n</code>\r\n</pre>\r\n\r\nNow, since this is an admin section I want to make sure that only the logged in user can access this page. To do this we will have to add authentication code inside our constructor in the <span class=\"spl\">CategoriesController.php</span> page. You can also write a middleware to achieve this.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n...\r\n/**\r\n* CategoryController constructor.\r\n*/\r\npublic function __construct()\r\n{\r\n$this->middleware(\'auth\');\r\n}\r\n...\r\n\r\n</code>\r\n</pre>\r\n\r\n<h2><span style=\"text-decoration: underline;\"><strong>The Index() function</strong></span></h2>\r\nThe below code needs to be added to the index function. The index function will handle listing of the categories along with the edit and delete buttons.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n/**\r\n * Display a listing of the resource.\r\n *\r\n * @return Response\r\n */\r\npublic function index()\r\n{\r\n    // get all the categories\r\n    $categories = DB::table(\'categories\')->paginate(15);\r\n\r\n    // load the view and pass the categories\r\n    return view(\'admin.category.index\', [\'categories\' => $categories]);\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\nWe are simply querying the categories table and trying to paginate the results. <span class=\"spl\">The DB::table(‘categories’)</span> part will fetch all the categories and the paginate function will paginate the results in 15 records each.\r\n\r\nNext, We have to send the results to the view file. Usually view files goes inside <span class=\"spl\">resources/views/</span> directory but since this is an <a href=\"http://deepdivetuts.com/create-a-simple-admin-section-using-laravel-5-3-and-blade-templates\" target=\"_blank\">admin section</a> we have to create a separate admin directory inside <span class=\"spl\">resources/views</span> and add all the admin views inside it. So for <span class=\"spl\">CategoryController.php</span> the views will be in <span class=\"spl\">resources/views/admin/category/</span> folder.\r\n\r\nLets have a closer look to the following line that we added in the controller.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\nreturn view(\'admin.category.index\', [\'categories\' => $categories]);\r\n</script>\r\n</code>\r\n</pre>\r\n\r\nWe are going to send $categories array to <span class=\"spl\">admin/category/index.blade.php</span> file. We use a dot notation to separate the directory.\r\n\r\nThis is what the <span class=\"spl\">index.blade.php</span> looks like:\r\n\r\n<pre>\r\n<code class=\"language-markup\">\r\n<script type=\"prism-html-markup\">\r\n@extends(\'layouts.app\')\r\n\r\n@section(\'content\')\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n\r\n        <h1>All Categories</h1>\r\n\r\n        <div><a href=\"{{ URL::to(\'admin/categories/create\') }}\">Create a Category</a></div>\r\n\r\n        <!-- will be used to show any messages -->\r\n        @if (Session::has(\'message\'))\r\n            <div class=\"alert alert-info\">{{ Session::get(\'message\') }}</div>\r\n        @endif\r\n\r\n        <table class=\"table table-striped table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <td>ID</td>\r\n                    <td>Category name</td>\r\n                    <td>Actions</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            @foreach($categories as $key => $value)\r\n                <tr>\r\n                    <td>{{ $value->id }}</td>\r\n                    <td>{{ $value->name }}</td>\r\n                    <td>\r\n\r\n                        <a class=\"btn btn-small btn-info\" href=\"{{ URL::to(\'admin/categories/\' . $value->id . \'/edit\') }}\">Edit</a>\r\n\r\n                        {{ Form::open(array(\'url\' => \'admin/categories/\' . $value->id, \'class\' => \'btn btn-small\')) }}\r\n                            {{ Form::hidden(\'_method\', \'DELETE\') }}\r\n                            {{ Form::submit(\'Delete\', array(\'class\' => \'btn btn-danger\')) }}\r\n                        {{ Form::close() }}\r\n                    </td>\r\n                </tr>\r\n            @endforeach\r\n\r\n            {{ $categories->links() }}\r\n            </tbody>\r\n        </table>\r\n\r\n    </div>\r\n</div>\r\n@endsection\r\n</script>\r\n</code>\r\n</pre>\r\n\r\nWe are extending the default Laravel <span class=\"spl\">layouts.app</span>. To generate pagination links the following code needs to be added to the <span class=\"spl\">index.blade.php</span> file.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n{{ $categories->links() }}\r\n\r\n</code>\r\n</pre>\r\n\r\n<h2><span style=\"text-decoration: underline;\"><strong>The create() function</strong></span></h2>\r\nThe create function will just display the view at <span class=\"spl\">resources/views/admin/category/create.blade.php</span>\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n/**\r\n* Show the form for creating a new resource.\r\n*\r\n* @return Response\r\n*/\r\npublic function create()\r\n{\r\n    return view(\'admin.category.create\');\r\n}\r\n</code>\r\n</pre>\r\n\r\nAnd the <span class=\"spl\">create.blade.php</span> file looks like:\r\n\r\n<pre>\r\n<code class=\"language-markup\">\r\n<script type=\"prism-html-markup\">\r\n@extends(\'layouts.app\')\r\n\r\n@section(\'content\')\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        \r\n        <h1>Create a Category</h1> \r\n        \r\n        <!-- show errors -->\r\n        @if (count($errors) > 0)\r\n            <div class=\"alert alert-danger\">\r\n                <ul>\r\n                    @foreach ($errors->all() as $error)\r\n                        <li>{{ $error }}</li>\r\n                    @endforeach\r\n                </ul>\r\n            </div>\r\n        @endif\r\n\r\n        {{ Form::open(array(\'url\' => \'admin/categories\')) }}\r\n\r\n            <div class=\"form-group\">\r\n                {{ Form::label(\'name\', \'Name\') }}\r\n                {{ Form::text(\'name\', Input::old(\'name\'), array(\'class\' => \'form-control\')) }}\r\n            </div>\r\n\r\n            {{ Form::submit(\'Create Category!\', array(\'class\' => \'btn btn-primary\')) }}\r\n\r\n        {{ Form::close() }}\r\n\r\n    </div>\r\n</div>\r\n@endsection\r\n</script>\r\n</code>\r\n</pre>\r\n\r\n&nbsp;\r\n<h2><span style=\"text-decoration: underline;\"><strong>The store() function</strong></span></h2>\r\nThe store function will validate the input and store the data in the categories table.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n/**\r\n * Store a newly created resource in storage.\r\n *\r\n * @return Response\r\n */\r\npublic function store(Request $request)\r\n{\r\n    // validate\r\n    // read more on validation at http://laravel.com/docs/validation\r\n    $rules = array(\r\n        \'name\'       => \'required\',\r\n    );\r\n    $validator = Validator::make(Input::all(), $rules);\r\n\r\n\r\n    $this->validate($request, [\r\n        \'name\' => \'required\'\r\n    ]);\r\n\r\n    if ($validator->fails()) {\r\n        return redirect(\'admin/categories/create\')\r\n                    ->withErrors($validator)\r\n                    ->withInput();\r\n    } else {\r\n        // store\r\n        $category = new Category;\r\n        $category->name = Input::get(\'name\');\r\n        $category->visible = 1;\r\n        $category->save();\r\n\r\n        // redirect\r\n        Session::flash(\'message\', \'Successfully created Category!\');\r\n        return redirect(\'admin/categories\');\r\n        \r\n    }\r\n}\r\n</code>\r\n</pre>\r\n\r\n<h2><span style=\"text-decoration: underline;\"><strong>The edit() function</strong></span></h2>\r\nThe edit function displays the existing data in the input fields. It uses the layout <span class=\"spl\">resources/views/admin/category/edit.blade.php</span>\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n/**\r\n * Show the form for editing the specified resource.\r\n *\r\n * @param int $id\r\n * @return Response\r\n */\r\npublic function edit($id)\r\n{\r\n    // get the category\r\n    $category = Category::find($id);\r\n\r\n    // show the edit form and pass the category\r\n    return view(\'admin.category.edit\')\r\n    ->with(\'category\', $category);\r\n}\r\n</code>\r\n</pre>\r\n\r\n...and the <span class=\"spl\">edit.blade.php</span> view looks like below:\r\n\r\n<pre>\r\n<code class=\"language-markup\">\r\n<script type=\"prism-html-markup\">\r\n@extends(\'layouts.app\')\r\n\r\n@section(\'content\')\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n\r\n        <h1>Edit {{ $category->name }}</h1>\r\n\r\n        {{ Form::model($category, array(\'route\' => array(\'categories.update\', $category->id), \'method\' => \'PUT\')) }}\r\n\r\n            <div class=\"form-group\">\r\n                {{ Form::label(\'name\', \'Name\') }}\r\n                {{ Form::text(\'name\', null, array(\'class\' => \'form-control\')) }}\r\n            </div>\r\n\r\n            {{ Form::submit(\'Edit the Category!\', array(\'class\' => \'btn btn-primary\')) }}\r\n\r\n        {{ Form::close() }}\r\n    </div>\r\n</div>\r\n@endsection\r\n</script>\r\n</code>\r\n</pre>\r\n\r\n&nbsp;\r\n<h2><span style=\"text-decoration: underline;\"><strong>The update() function</strong></span></h2>\r\nThe update function will update the existing category.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n/**\r\n * Update the specified resource in storage.\r\n *\r\n * @param  int  $id\r\n * @return Response\r\n */\r\npublic function update($id, Request $request)\r\n{\r\n    // validate\r\n    // read more on validation at http://laravel.com/docs/validation\r\n    $rules = array(\r\n        \'name\'  => \'required\',\r\n    );\r\n    $validator = Validator::make(Input::all(), $rules);\r\n\r\n\r\n    $this->validate($request, [\r\n        \'name\' => \'required\'\r\n    ]);\r\n\r\n    if ($validator->fails()) {\r\n        return redirect(\'admin/categories/create\')\r\n                    ->withErrors($validator)\r\n                    ->withInput();\r\n    } else {\r\n        // store\r\n        $category = Category::find($id);\r\n        $category->name = Input::get(\'name\');\r\n        $category->visible = 1;\r\n        $category->save();\r\n\r\n        // redirect\r\n        Session::flash(\'message\', \'Successfully updated category!\');\r\n        return redirect(\'admin/categories\');\r\n        \r\n    }\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n&nbsp;\r\n<h2>Finally the <span style=\"text-decoration: underline;\"><strong>destroy() function</strong></span></h2>\r\nThe destroy function deletes a category from the categories table.\r\n\r\n<pre>\r\n<code class=\"language-php\">\r\n\r\n/**\r\n * Remove the specified resource from storage.\r\n *\r\n * @param  int  $id\r\n * @return Response\r\n */\r\npublic function destroy($id)\r\n{\r\n    // delete\r\n    $category = Category::find($id);\r\n    $category->delete();\r\n\r\n    // redirect\r\n    Session::flash(\'message\', \'Successfully deleted the category!\');\r\n    return redirect(\'admin/categories\')->with(\'status\', \'Category Deleted!\');\r\n}\r\n\r\n</code>\r\n</pre>\r\n\r\n&nbsp;\r\n\r\n<strong>You can access the complete code on my github page: <span style=\"color: #ff6600;\"><a style=\"color: #ff6600;\" href=\"https://github.com/joelfrens/deepdivetuts\">https://github.com/joelfrens/deepdivetuts</a></span></strong>\r\n\r\n<strong>You can also visit my <span style=\"color: #ff0000;\"><a style=\"color: #ff0000;\" href=\"https://www.youtube.com/channel/UCsos8O33IxJ2bPdHNIvGadw\">Youtube Channel</a></span></strong>\r\n\r\n<iframe src=\"https://www.youtube.com/embed/gr33_zNw5rw\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>',1,NULL,'2017-04-23 16:37:53','2017-04-23 18:48:28'),(41,1,'Test HTML','test-html','test',186,'','<pre>\r\n<code class=\"language-markup\">\r\n<script type=\"prism-html-markup\">\r\n@extends(\'layouts.app\')\r\n\r\n@section(\'content\')\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n\r\n        <h1>All Categories</h1>\r\n\r\n        <div><a href=\"{{ URL::to(\'admin/categories/create\') }}\">Create a Category</a></div>\r\n\r\n        <!-- will be used to show any messages -->\r\n        @if (Session::has(\'message\'))\r\n            <div class=\"alert alert-info\">{{ Session::get(\'message\') }}</div>\r\n        @endif\r\n\r\n        <table class=\"table table-striped table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <td>ID</td>\r\n                    <td>Category name</td>\r\n                    <td>Actions</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            @foreach($categories as $key => $value)\r\n                <tr>\r\n                    <td>{{ $value->id }}</td>\r\n                    <td>{{ $value->name }}</td>\r\n                    <td>\r\n\r\n                        <a class=\"btn btn-small btn-info\" href=\"{{ URL::to(\'admin/categories/\' . $value->id . \'/edit\') }}\">Edit</a>\r\n\r\n                        {{ Form::open(array(\'url\' => \'admin/categories/\' . $value->id, \'class\' => \'btn btn-small\')) }}\r\n                            {{ Form::hidden(\'_method\', \'DELETE\') }}\r\n                            {{ Form::submit(\'Delete\', array(\'class\' => \'btn btn-danger\')) }}\r\n                        {{ Form::close() }}\r\n                    </td>\r\n                </tr>\r\n            @endforeach\r\n\r\n            {{ $categories->links() }}\r\n            </tbody>\r\n        </table>\r\n\r\n    </div>\r\n</div>\r\n@endsection\r\n</script>\r\n</code>\r\n</pre>',1,NULL,'2017-04-23 17:05:16','2017-04-23 17:16:19'),(42,1,'Laravel Directory structure explained','laravel-directory-structure-explained','test',188,'','<p class=\"p1\">In this tutorial I am going to explain the directory structure of Laravel.</p>\r\n\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">.Env file - This has all the default settings of Laravel. It has the following variables\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">APP_KEY: This is the application key and it help in</li>\r\n 	<li class=\"li1\">DB_CONNECTION: Setup mysql connection in the section. You will also need to setup DB_HOST, DB_PORT, DB_DATABASE and DB_PASSWORD.</li>\r\n 	<li class=\"li1\">MAIL_DRIVER: Setup your mail drivers if you are using any other drivers other than SMTP which is default in Laravel.</li>\r\n</ul>\r\n</li>\r\n 	<li class=\"li1\">App Directory - All your controller code goes inside this directory. You controllers will be created inside app/Http/Controllers directory. Laravel comes with a few Auth controllers inside the Auth directory inside the Controllers directory. The following controllers are included inside Auth:\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">ForgotPasswordController.php</li>\r\n 	<li class=\"li1\">LoginController.php</li>\r\n 	<li class=\"li1\">RegisterController.php</li>\r\n 	<li class=\"li1\">ResetPasswordController.php</li>\r\n</ul>\r\n</li>\r\n 	<li class=\"li1\">Middleware Directory - This contains all your middlewares. Middleware is a term used to describe an action/code that needs to be executed before going to a particular route. For ex. When the user logs in, sometimes you will have to check whether the user has enough privileges to access a particular page. This can be cleanly done using middlewares. This means the ‘privilege check’ logic is separated out from your controllers which is a great help in maintaining your code. Also, remember that the Request $request variable is always available in your middleware.</li>\r\n</ul>\r\n<p class=\"p1\">Laravel 5.3 comes with default middlewares:</p>\r\n\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">EncryptCookies.php</li>\r\n 	<li class=\"li1\">RedirectIfAuthenticated.php</li>\r\n 	<li class=\"li1\">VerifyCsrfToken.php</li>\r\n 	<li class=\"li1\">Config directory: The config folder is structured in a very nice way. It consists of the following files\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">App.php: All the app settings are in this folder.</li>\r\n 	<li class=\"li1\">Cache.php: This is the place where you specify cache settings and set your Cache drivers.</li>\r\n 	<li class=\"li1\">Database.php: This is the file where you set all your database settings.</li>\r\n 	<li class=\"li1\">Broadcasting.php: This is the file where you set up broadcasting drivers.</li>\r\n 	<li class=\"li1\">Auth.php: This option controls the default authentication “guard” and password. You can also define every authentication guard for your application. You can also specify how your passwords will be reset.</li>\r\n 	<li class=\"li1\">Filesystems.php: Here you can specify the default filesystem disk that should be used by the framework. You can also define the cloud filesystem disk.</li>\r\n 	<li class=\"li1\">Mail.php: Laravel supports both SMTP and PHP\'s \"mail\" function as drivers for the sending of e-mail. You may specify which one you\'re using throughout your application here. By default, Laravel is setup for SMTP mail. Supported: \"smtp\", \"mail\", \"sendmail\", \"mailgun\", \"mandrill\", \"ses\", \"sparkpost\", \"log\"</li>\r\n 	<li class=\"li1\">Queue.php: The Laravel queue API supports a variety of back-ends via an unified API, giving you convenient access to each back-end using the same syntax for each one. Here you may set the default queue driver.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p class=\"p3\">Supported: \"sync\", \"database\", \"beanstalkd\", \"sqs\", \"redis\", \"null\"</p>\r\n\r\n<ul class=\"ul1\">\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">Services.php: This file is for storing the credentials for third party services such as Stripe, Mailgun, SparkPost and others.</li>\r\n 	<li class=\"li1\">Session.php: This option controls the default session \"driver\" that will be used on requests. By default, we will use the lightweight native driver but you may specify any of the other wonderful drivers provided here. Supported: \"file\", \"cookie\", \"database\", \"apc\", \"memcached\", \"redis\", \"array\"</li>\r\n 	<li class=\"li1\">View.php: Most templating systems load templates from disk. Here you may specify an array of paths that should be checked for your views. Of course the usual Laravel view path has already been registered for you.</li>\r\n</ul>\r\n 	<li class=\"li1\">Database directory: This directory contains all the folders and files that help in database operations and seeding the tables. There are following default folders:\r\n<ul class=\"ul1\">\r\n 	<li class=\"li1\">Factories: Factories give a convenient way to create models for testing and seeding your database.</li>\r\n 	<li class=\"li1\">Migrations: Migrations help in creating/updating and dropping tables. This comes very helpful when you work in a team and someone in your team creates or alters a table. You then have to just run all the migrations and not keep a record of who has amended the database.</li>\r\n 	<li class=\"li1\">Seeds: This helps in adding dummy data to your database quickly which can be very helpful in testing.</li>\r\n</ul>\r\n</li>\r\n 	<li class=\"li1\">Public directory: This will contain all your css and javascript files and other assets.</li>\r\n 	<li class=\"li1\">Routes Directory: Here is where you can register web routes for your application. These routes are loaded by the RouteServiceProvider within a group which contains the \"web\" middleware group.</li>\r\n 	<li class=\"li1\">Resources Directory: All your templates go inside this directory.</li>\r\n</ul>\r\n<p class=\"p1\">This is just a brief description of the folders that are very useful in Laravel development. In the later tutorials I will be explaining each of these folders in details.</p>\r\n<p class=\"p1\">I also have a Youtube channel which can be helpful if you prefer video tutorials over text.</p>',1,NULL,'2017-04-23 19:55:03','2017-04-23 19:55:03'),(43,1,'Installing Laravel 5.3 on a Mac PC','installing-laravel-5-3-on-a-mac-pc','test',186,'','This tutorial assumes that you have already installed MAMP on your Mac machine.\r\nIn this tutorial I am going to tell you how to install Laravel on a Mac PC. Now I have installed a few tools before installing Laravel. Here’s a following list. You need to only install Composer and ignore the rest tools.\r\n\r\nComposer - To check if the composer is installed on your system, go to the terminal and type: <span class=\"spl\">composer -V </span>. You should get some output like Composer version 1.2.x.x\r\n\r\nIf you do not get some similar output then you need to install composer on your system\r\n\r\nNode - To check if Node is installed on your system, in the terminal type <span class=\"spl\">node -v</span>\r\n\r\nIf node is installed you should get the following output: v6.x.x or something similar.\r\nIf you get an error or it is not installed then you need to install node before proceeding with this tutorial.\r\n\r\nGulp - To check if Gulp is installed, in the terminal type <span class=\"spl\">gulp -v</span>\r\n\r\nIf Gulp is installed then you should getting a similar output - CLI version 3.x.x\r\nIf Gulp is not installed the you need to install it.\r\n\r\nBower - To check if Bower is installed, in the terminal type <span class=\"spl\">bower -v</span>\r\n\r\nIf Bower is installed then you should getting a version number output.\r\nIf Bower is not installed the you need to install it.\r\n\r\nAfter installing the above tools you need to install the Laravel installer. The command to do that is:\r\n[php]\r\nComposer global require \"laravel/installer\"\r\n[/php]\r\n\r\nNow, I had an issue adding the PATH to mac PC. This is basically setting the composer PATH. This can be fixed by running the following command in the terminal\r\n\r\n[php]\r\nExport PATH=\"~/.composer/vendor/bin:$PATH\"\r\n[/php]\r\n\r\nThen go into you sites directory where all your projects are stored and run the following command to create a new Laravel project.\r\n\r\n[php]\r\nLaravel new PROJECT_NAME\r\n[/php]\r\n\r\nThis will install all the required packages that are there in your <span class=\"spl\">composer.json</span> file.\r\n\r\nThe next step is set a domain name to your laravel project.\r\nTo do that, in your terminal, type:\r\n\r\n[php]\r\nsudo vi/etc/hosts\r\n[/php]\r\n\r\nThis will prompt you to enter your PC password.\r\n\r\nIn the file, go into insert mode by type i character and add a new entry at the end of the file.\r\n\r\n[php]\r\n127.0.0.1 PROJECT_NAME.dev\r\n[/php]\r\n\r\n(.dev can be anything of your choice but please use something sensible like .local or .dev)\r\n\r\n<strong>EXTRAS</strong>\r\n\r\nTry adding some shortcuts to your bash_profile.\r\nTo do this you need to, in your terminal, type <span class=\"spl\">sudo vi ~/.bash_profile</span>\r\n\r\nOn the editor, go into the insert mode and type the following:\r\n<span class=\"spl\">Alias vhosts=\'sudo vi /etc/hosts\'</span>\r\n\r\nSo next time you create a new entry in your hosts file you can just type vhosts and the file will open.\r\n\r\nI also added the following alias that would help me to create a vhost entry in my <span class=\"spl\">httpd-vhosts.conf</span> file\r\n<span class=\"spl\">Alias virtualhosts=\'sudo vi /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf\'</span>\r\n<strong>END OF EXTRAS</strong>\r\n\r\nCreate a new entry in your <span class=\"spl\">httpd-vhosts.conf</span> file by typing the command given above i.e <span class=\"spl\">virtualhosts</span>\r\n\r\nAt the end of the file add the following snippet:\r\n\r\n[php]\r\n<virtualHost *.80>\r\nDocumentRoot “/Users/YOUR_USERNAME/sites/deepdivetuts/public”\r\nServerName deepdivetuts.dev\r\n</virtualHost>\r\n[/php]\r\n\r\nRestart your MAMP server.\r\n\r\nOpen a browser and type <span class=\"spl\">http://deepdivetuts.dev</span>\r\n\r\nIf you see a default Laravel page then you have installed Laravel successfully\r\n\r\nWatch the below video if you find any issues during the installation.\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gkm6R6u5RwI?list=PLe-L0qrpNHcTvyj8shQUebyVTNJhSioMe\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>',1,NULL,'2017-04-23 19:55:35','2017-04-23 19:55:35');
/*!40000 ALTER TABLE `articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `desc` text COLLATE utf8_unicode_ci NOT NULL,
  `category_image` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `visible` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=194 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (186,'PHP','','','php',0,'2017-04-12 19:33:18','2017-04-12 19:33:18'),(188,'Laravel','','','laravel',1,'2017-04-23 16:25:43','2017-04-23 16:25:43'),(189,'CSS','','','css',1,'2017-04-23 16:25:52','2017-04-23 16:25:52'),(190,'Codeigniter','','','codeigniter',1,'2017-04-23 16:26:09','2017-04-23 16:26:09'),(191,'Zend','','','zend',1,'2017-04-23 16:26:18','2017-04-23 16:26:18'),(192,'Linux','','','linux',1,'2017-04-23 16:27:29','2017-04-23 16:27:29'),(193,'Server','','','server',1,'2017-04-23 16:27:37','2017-04-23 16:27:37');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ingredients`
--

DROP TABLE IF EXISTS `ingredients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ingredients` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ingredients`
--

LOCK TABLES `ingredients` WRITE;
/*!40000 ALTER TABLE `ingredients` DISABLE KEYS */;
/*!40000 ALTER TABLE `ingredients` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menus`
--

DROP TABLE IF EXISTS `menus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `menus` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `link` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `active` tinyint(1) NOT NULL,
  `parent` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `menus`
--

LOCK TABLES `menus` WRITE;
/*!40000 ALTER TABLE `menus` DISABLE KEYS */;
INSERT INTO `menus` VALUES (1,'Home','home','/',1,1,NULL,'2017-04-22 14:18:58'),(2,'Test','test','/home/test',0,1,'2017-04-22 09:41:00','2017-04-22 14:19:01');
/*!40000 ALTER TABLE `menus` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES (5,'2014_10_12_000000_create_users_table',1),(6,'2014_10_12_100000_create_password_resets_table',1),(7,'2016_12_22_202600_create_categories_table',1),(8,'2016_12_22_203733_add_visible_to_categories_table',2),(9,'2017_01_26_232624_create_videos_table',3),(10,'2017_01_31_195735_add_desc_to_categories',4),(12,'2017_01_31_203915_add_image',5),(13,'2017_01_31_212414_add_image_to_categories_table',6),(14,'2017_02_22_070849_add_status_to_user_table',7),(15,'2017_03_03_234226_create_articles_table',8),(16,'2017_03_03_234332_create_recipes_table',8),(17,'2017_03_03_234414_create_ingredients_table',8),(18,'2017_03_03_234502_create_article_images_table',8),(19,'2017_03_03_234635_create_tags_table',8),(20,'2017_03_03_234704_add_slug_to_recipes_table',8),(21,'2017_03_03_234900_create_recipe_ingredients_table',8),(22,'2017_03_04_004019_add_coordinates_to_articles_table',9),(23,'2017_03_04_004143_add_categories_id_to_articles_table',10),(24,'2017_03_04_004225_add_meta_keywords_to_articles_table',11),(25,'2017_03_31_153634_create_subscriptions_table',12),(26,'2017_04_09_112458_create_settings_table',13),(27,'2017_04_14_141821_create_pages_table',14),(28,'2017_04_14_142603_create_menu_table',14),(29,'2017_04_22_142306_delete_coordinates_column_from_articles',15);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pages` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL,
  `meta_keywords` longtext COLLATE utf8_unicode_ci NOT NULL,
  `meta_description` longtext COLLATE utf8_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `active` tinyint(1) NOT NULL,
  `parent` int(11) DEFAULT NULL,
  `schedule_on` datetime DEFAULT NULL,
  `start_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
INSERT INTO `pages` VALUES (2,'About Us','This is about us page','about us','About Us','about-us','',0,NULL,NULL,NULL,NULL,'2017-04-14 19:05:20','2017-04-19 19:57:31');
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `recipes`
--

DROP TABLE IF EXISTS `recipes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `recipes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `recipes`
--

LOCK TABLES `recipes` WRITE;
/*!40000 ALTER TABLE `recipes` DISABLE KEYS */;
/*!40000 ALTER TABLE `recipes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `settings`
--

DROP TABLE IF EXISTS `settings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `settings` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `code` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `value` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `settings`
--

LOCK TABLES `settings` WRITE;
/*!40000 ALTER TABLE `settings` DISABLE KEYS */;
INSERT INTO `settings` VALUES (1,NULL,'Site name','site_name','DeepDiveTuts','','2017-04-21 17:49:28','2017-04-21 17:49:28');
/*!40000 ALTER TABLE `settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `subscriptions`
--

DROP TABLE IF EXISTS `subscriptions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `subscriptions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `cost` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `active` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `subscriptions`
--

LOCK TABLES `subscriptions` WRITE;
/*!40000 ALTER TABLE `subscriptions` DISABLE KEYS */;
INSERT INTO `subscriptions` VALUES (2,'Foo subscription123','This is a foo subscription123','2.98','',0,'2017-04-14 07:49:36','2017-04-14 07:57:22'),(3,'Test','Test','2.98','',1,'2017-04-22 12:54:43','2017-04-22 12:54:43');
/*!40000 ALTER TABLE `subscriptions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (4,'Programming','test-tag-1',1,'2017-03-05 17:44:43','2017-04-22 13:05:49'),(5,'Installations','test-tag-2',1,'2017-03-05 17:44:48','2017-04-12 17:42:56'),(6,'Notes','notes',1,'2017-04-12 19:27:59','2017-04-12 19:27:59'),(7,'Personal','personal',1,'2017-04-12 19:28:07','2017-04-12 19:28:07'),(8,'Issues','issues',1,'2017-04-12 19:28:17','2017-04-12 19:28:17'),(9,'Fixes','fixes',1,'2017-04-12 19:28:22','2017-04-12 19:28:22'),(10,'Snippets','snippets',1,'2017-04-12 19:28:40','2017-04-12 19:28:40'),(11,'Video Tutorials','video-tutorials',1,'2017-04-23 16:33:15','2017-04-23 16:33:15');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Joel Fernandes','joelfrens@gmail.com','$2y$10$CIht2s2OERF902QDoeAATuK2nDoUkDaHX7I0BHLAVx64lu.aC1Z9S',1,'myR74JUXiJiYdirjmHg5XaIqUWHMEV5pQFvMXJtHqbHZK5XkaqEhWYBAvqt6','2016-12-22 23:34:10','2017-04-22 11:20:28'),(2,'Test users','testtest@gmail.com','$2y$10$cg8fmAm7OSI5p.xFNzLLu.fYubGqLSxEo1ZC3crJQAYN4FHDA9SlK',0,'M003CfbPZywf9M8HGIF932jOnEq6cHiUqV6RGCFx7Up3U4PfXKFggO2fAyqu','2017-02-22 07:02:36','2017-04-22 11:20:38');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `videos`
--

DROP TABLE IF EXISTS `videos`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `videos` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `category_id` int(11) NOT NULL,
  `status` tinyint(1) NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=123 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `videos`
--

LOCK TABLES `videos` WRITE;
/*!40000 ALTER TABLE `videos` DISABLE KEYS */;
INSERT INTO `videos` VALUES (23,'Ms. Alva Feeney','',157,1,NULL,'2017-01-26 23:42:39','2017-01-26 23:42:39'),(24,'Braden Runolfsson','',157,1,NULL,'2017-01-26 23:42:40','2017-01-26 23:42:40'),(25,'Prof. Paolo Luettgen','',157,1,NULL,'2017-01-26 23:42:40','2017-01-26 23:42:40'),(26,'Nia Monahan','',157,1,NULL,'2017-01-26 23:42:40','2017-01-26 23:42:40'),(27,'Asa Rath','',157,1,NULL,'2017-01-26 23:42:41','2017-01-26 23:42:41'),(28,'Prof. Rick Schinner II','',158,1,NULL,'2017-01-26 23:42:41','2017-01-26 23:42:41'),(29,'Maxime Bernhard','',158,1,NULL,'2017-01-26 23:42:41','2017-01-26 23:42:41'),(30,'Trycia O\'Connell','',158,1,NULL,'2017-01-26 23:42:41','2017-01-26 23:42:41'),(31,'Prof. Orrin Christiansen MD','',158,1,NULL,'2017-01-26 23:42:41','2017-01-26 23:42:41'),(32,'Dr. Anne Conn IV','',158,1,NULL,'2017-01-26 23:42:41','2017-01-26 23:42:41'),(33,'Miss Ressie Lubowitz','',159,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(34,'Mr. Destin Bednar','',159,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(35,'Miss Daphnee Schaefer','',159,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(36,'Dr. Florian Miller','',159,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(37,'Elody Welch','',159,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(38,'Dr. Jaylon Kuhic','',160,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(39,'Miss Eveline Padberg','',160,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(40,'Dr. Waldo Monahan DDS','',160,1,NULL,'2017-01-26 23:42:42','2017-01-26 23:42:42'),(41,'Gia Langosh','',160,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(42,'Libby Doyle','',160,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(43,'Dr. Ignatius Tromp Sr.','',161,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(44,'Mr. Jaylin Becker','',161,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(45,'Irving Olson','',161,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(46,'Ambrose Bauch','',161,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(47,'Miss Gabriella Adams','',161,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(48,'Pink Stoltenberg','',162,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(49,'Arno Ward IV','',162,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(50,'Brando Mitchell','',162,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(51,'Prof. Bessie Monahan II','',162,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(52,'Oma Rohan DDS','',162,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(53,'Van Reilly','',163,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(54,'Prof. Clair Crist DVM','',163,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(55,'Juwan Gutkowski','',163,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(56,'Dr. Isac Goldner','',163,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(57,'Cali Prosacco V','',163,1,NULL,'2017-01-26 23:42:43','2017-01-26 23:42:43'),(58,'Jackie Toy','',164,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(59,'Dr. Catherine Borer PhD','',164,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(60,'Prof. Stacey Thompson','',164,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(61,'Zachery Satterfield II','',164,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(62,'Jamie O\'Hara','',164,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(63,'Lucy Batz','',165,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(64,'Mr. Jamar Hammes DDS','',165,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(65,'Prof. Abby Kemmer IV','',165,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(66,'Dr. Tiana Bode I','',165,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(67,'Prof. Justina Lehner PhD','',165,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(68,'Ludwig Considine','',166,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(69,'Mr. Stephan Veum','',166,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(70,'Sigrid Braun','',166,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(71,'Mr. Hank Price','',166,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(72,'Isac Hegmann PhD','',166,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(73,'Flavie Strosin','',167,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(74,'Emmy Schiller','',167,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(75,'Dr. Ashleigh Kuhic Sr.','',167,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(76,'Austin Christiansen','',167,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(77,'Vida Mante','',167,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(78,'Mrs. Emie Bahringer Sr.','',168,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(79,'Miss Charlotte King','',168,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(80,'Prof. Seth Jerde','',168,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(81,'Mrs. Madalyn Orn V','',168,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(82,'Jesse Conroy','',168,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(83,'Dr. Sherman Lehner Sr.','',169,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(84,'Mrs. Nicolette Braun','',169,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(85,'Prof. Milford Terry','',169,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(86,'Estefania Littel','',169,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(87,'Jairo Cole','',169,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(88,'Helmer Hyatt','',170,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(89,'Miss Lou Huel Sr.','',170,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(90,'Lenora Pollich','',170,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(91,'Amy Johnston','',170,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(92,'Mr. Myron Schaden','',170,1,NULL,'2017-01-26 23:42:44','2017-01-26 23:42:44'),(93,'Evelyn Krajcik','',171,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(94,'Mariane Wehner V','',171,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(95,'Prof. Roel Ledner','',171,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(96,'Gerardo Shanahan II','',171,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(97,'Ms. Vella Pagac','',171,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(98,'Dr. Sarah Hermann PhD','',172,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(99,'Elfrieda Feil Sr.','',172,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(100,'Carlee Adams','',172,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(101,'Marty Yost','',172,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(102,'Camylle Mayert','',172,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(103,'Anibal Kunze','',173,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(104,'Dixie Schmitt','',173,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(105,'Michale Stanton','',173,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(106,'Prof. Ryder Moore II','',173,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(107,'Jalen Wisoky','',173,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(108,'Lauren Turner','',174,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(109,'Mr. Forrest Jerde I','',174,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(110,'Everardo Blanda','',174,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(111,'Lyda Balistreri MD','',174,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(112,'Mr. Darien Bosco','',174,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(113,'Ms. Alayna Ziemann II','',175,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(114,'Dovie Bartell','',175,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(115,'Marques Hickle','',175,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(116,'Benjamin Lemke','',175,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(117,'Royce Hilll','',175,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(118,'Miss Annabell Collins DVM','',176,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(119,'Tomas Morissette MD','',176,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(120,'Burdette Gerlach','',176,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(121,'Mrs. Rozella O\'Hara','',176,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45'),(122,'Ms. Margaretta Erdman','',176,1,NULL,'2017-01-26 23:42:45','2017-01-26 23:42:45');
/*!40000 ALTER TABLE `videos` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-04-23 22:49:49
